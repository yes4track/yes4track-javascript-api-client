/*
 * Caspian.Yes4Track.Service API
 * Caspian.Yes4Track.Service API
 *
 * OpenAPI spec version: v1
 * Contact: admin@yes4track.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.29
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Caspianyes4TrackserviceApi);
  }
}(this, function(expect, Caspianyes4TrackserviceApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Caspianyes4TrackserviceApi.ExperienceApi();
  });

  describe('(package)', function() {
    describe('ExperienceApi', function() {
      describe('getByIdExperience', function() {
        it('should call getByIdExperience successfully', function(done) {
          // TODO: uncomment, update parameter values for getByIdExperience call and complete the assertions
          /*
          var opts = {};

          instance.getByIdExperience(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Caspianyes4TrackserviceApi.GetAllExperienceResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getByIdExperienceCode', function() {
        it('should call getByIdExperienceCode successfully', function(done) {
          // TODO: uncomment, update parameter values for getByIdExperienceCode call and complete the assertions
          /*
          var opts = {};

          instance.getByIdExperienceCode(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Caspianyes4TrackserviceApi.GetByIdExperienceCodeResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('yes4trackV1ExperiencesGet', function() {
        it('should call yes4trackV1ExperiencesGet successfully', function(done) {
          // TODO: uncomment, update parameter values for yes4trackV1ExperiencesGet call and complete the assertions
          /*
          var opts = {};

          instance.yes4trackV1ExperiencesGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Caspianyes4TrackserviceApi.GetAllPagedExperienceResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('yes4trackV1ExperiencesIdActivatePost', function() {
        it('should call yes4trackV1ExperiencesIdActivatePost successfully', function(done) {
          // TODO: uncomment, update parameter values for yes4trackV1ExperiencesIdActivatePost call
          /*
          var opts = {};

          instance.yes4trackV1ExperiencesIdActivatePost(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('yes4trackV1ExperiencesIdCodeCodeCheckPost', function() {
        it('should call yes4trackV1ExperiencesIdCodeCodeCheckPost successfully', function(done) {
          // TODO: uncomment, update parameter values for yes4trackV1ExperiencesIdCodeCodeCheckPost call and complete the assertions
          /*
          var opts = {};

          instance.yes4trackV1ExperiencesIdCodeCodeCheckPost(id, code, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Caspianyes4TrackserviceApi.PostCheckExperienceCodeResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('yes4trackV1ExperiencesIdDelete', function() {
        it('should call yes4trackV1ExperiencesIdDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for yes4trackV1ExperiencesIdDelete call
          /*
          var opts = {};

          instance.yes4trackV1ExperiencesIdDelete(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('yes4trackV1ExperiencesIdImagesImageIdDelete', function() {
        it('should call yes4trackV1ExperiencesIdImagesImageIdDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for yes4trackV1ExperiencesIdImagesImageIdDelete call
          /*
          var opts = {};

          instance.yes4trackV1ExperiencesIdImagesImageIdDelete(id, imageId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('yes4trackV1ExperiencesIdImagesPost', function() {
        it('should call yes4trackV1ExperiencesIdImagesPost successfully', function(done) {
          // TODO: uncomment, update parameter values for yes4trackV1ExperiencesIdImagesPost call and complete the assertions
          /*
          var opts = {};

          instance.yes4trackV1ExperiencesIdImagesPost(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(&#x27;string&#x27;);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('yes4trackV1ExperiencesIdPatch', function() {
        it('should call yes4trackV1ExperiencesIdPatch successfully', function(done) {
          // TODO: uncomment, update parameter values for yes4trackV1ExperiencesIdPatch call
          /*
          var opts = {};

          instance.yes4trackV1ExperiencesIdPatch(body, id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('yes4trackV1ExperiencesIdPut', function() {
        it('should call yes4trackV1ExperiencesIdPut successfully', function(done) {
          // TODO: uncomment, update parameter values for yes4trackV1ExperiencesIdPut call
          /*
          var opts = {};

          instance.yes4trackV1ExperiencesIdPut(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('yes4trackV1ExperiencesIdVideosPost', function() {
        it('should call yes4trackV1ExperiencesIdVideosPost successfully', function(done) {
          // TODO: uncomment, update parameter values for yes4trackV1ExperiencesIdVideosPost call and complete the assertions
          /*
          var opts = {};

          instance.yes4trackV1ExperiencesIdVideosPost(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(&#x27;string&#x27;);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('yes4trackV1ExperiencesIdVideosVideoIdDelete', function() {
        it('should call yes4trackV1ExperiencesIdVideosVideoIdDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for yes4trackV1ExperiencesIdVideosVideoIdDelete call
          /*
          var opts = {};

          instance.yes4trackV1ExperiencesIdVideosVideoIdDelete(id, videoId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('yes4trackV1ExperiencesPost', function() {
        it('should call yes4trackV1ExperiencesPost successfully', function(done) {
          // TODO: uncomment, update parameter values for yes4trackV1ExperiencesPost call and complete the assertions
          /*
          var opts = {};

          instance.yes4trackV1ExperiencesPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Caspianyes4TrackserviceApi.PostExperienceResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
