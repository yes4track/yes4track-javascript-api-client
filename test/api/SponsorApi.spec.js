/*
 * Caspian.Yes4Track.Service API
 * Caspian.Yes4Track.Service API
 *
 * OpenAPI spec version: v1
 * Contact: admin@yes4track.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.29
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Caspianyes4TrackserviceApi);
  }
}(this, function(expect, Caspianyes4TrackserviceApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Caspianyes4TrackserviceApi.SponsorApi();
  });

  describe('(package)', function() {
    describe('SponsorApi', function() {
      describe('getByIdSponsor', function() {
        it('should call getByIdSponsor successfully', function(done) {
          // TODO: uncomment, update parameter values for getByIdSponsor call and complete the assertions
          /*
          var opts = {};

          instance.getByIdSponsor(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Caspianyes4TrackserviceApi.GetAllSponsorResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('yes4trackV1SponsorsGet', function() {
        it('should call yes4trackV1SponsorsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for yes4trackV1SponsorsGet call and complete the assertions
          /*
          var opts = {};

          instance.yes4trackV1SponsorsGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Caspianyes4TrackserviceApi.GetAllPagedSponsorResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('yes4trackV1SponsorsIdDelete', function() {
        it('should call yes4trackV1SponsorsIdDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for yes4trackV1SponsorsIdDelete call
          /*
          var opts = {};

          instance.yes4trackV1SponsorsIdDelete(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('yes4trackV1SponsorsIdPatch', function() {
        it('should call yes4trackV1SponsorsIdPatch successfully', function(done) {
          // TODO: uncomment, update parameter values for yes4trackV1SponsorsIdPatch call
          /*
          var opts = {};

          instance.yes4trackV1SponsorsIdPatch(body, id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('yes4trackV1SponsorsIdPut', function() {
        it('should call yes4trackV1SponsorsIdPut successfully', function(done) {
          // TODO: uncomment, update parameter values for yes4trackV1SponsorsIdPut call
          /*
          var opts = {};

          instance.yes4trackV1SponsorsIdPut(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('yes4trackV1SponsorsPost', function() {
        it('should call yes4trackV1SponsorsPost successfully', function(done) {
          // TODO: uncomment, update parameter values for yes4trackV1SponsorsPost call and complete the assertions
          /*
          var opts = {};

          instance.yes4trackV1SponsorsPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Caspianyes4TrackserviceApi.PostSponsorResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
