/*
 * Caspian.Yes4Track.Service API
 * Caspian.Yes4Track.Service API
 *
 * OpenAPI spec version: v1
 * Contact: admin@yes4track.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.29
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Caspianyes4TrackserviceApi);
  }
}(this, function(expect, Caspianyes4TrackserviceApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Caspianyes4TrackserviceApi.AdventureApi();
  });

  describe('(package)', function() {
    describe('AdventureApi', function() {
      describe('getByIdAdventure', function() {
        it('should call getByIdAdventure successfully', function(done) {
          // TODO: uncomment, update parameter values for getByIdAdventure call and complete the assertions
          /*
          var opts = {};

          instance.getByIdAdventure(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Caspianyes4TrackserviceApi.GetAllAdventureResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getByIdAdventureCode', function() {
        it('should call getByIdAdventureCode successfully', function(done) {
          // TODO: uncomment, update parameter values for getByIdAdventureCode call and complete the assertions
          /*
          var opts = {};

          instance.getByIdAdventureCode(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Caspianyes4TrackserviceApi.GetByIdAdventureCodeResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getByIdAdventureLikes', function() {
        it('should call getByIdAdventureLikes successfully', function(done) {
          // TODO: uncomment, update parameter values for getByIdAdventureLikes call and complete the assertions
          /*
          var opts = {};

          instance.getByIdAdventureLikes(id, likeId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Caspianyes4TrackserviceApi.GetAllAdventureLikesResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getUserLikedAdventure', function() {
        it('should call getUserLikedAdventure successfully', function(done) {
          // TODO: uncomment, update parameter values for getUserLikedAdventure call and complete the assertions
          /*
          var opts = {};

          instance.getUserLikedAdventure(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Caspianyes4TrackserviceApi.GetUserLikedAdventureResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('yes4trackV1AdventuresGet', function() {
        it('should call yes4trackV1AdventuresGet successfully', function(done) {
          // TODO: uncomment, update parameter values for yes4trackV1AdventuresGet call and complete the assertions
          /*
          var opts = {};

          instance.yes4trackV1AdventuresGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Caspianyes4TrackserviceApi.GetAllPagedAdventureResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('yes4trackV1AdventuresIdActivatePost', function() {
        it('should call yes4trackV1AdventuresIdActivatePost successfully', function(done) {
          // TODO: uncomment, update parameter values for yes4trackV1AdventuresIdActivatePost call
          /*
          var opts = {};

          instance.yes4trackV1AdventuresIdActivatePost(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('yes4trackV1AdventuresIdCodeCodeCheckPost', function() {
        it('should call yes4trackV1AdventuresIdCodeCodeCheckPost successfully', function(done) {
          // TODO: uncomment, update parameter values for yes4trackV1AdventuresIdCodeCodeCheckPost call and complete the assertions
          /*
          var opts = {};

          instance.yes4trackV1AdventuresIdCodeCodeCheckPost(id, code, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Caspianyes4TrackserviceApi.PostCheckAdventureCodeResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('yes4trackV1AdventuresIdDelete', function() {
        it('should call yes4trackV1AdventuresIdDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for yes4trackV1AdventuresIdDelete call
          /*
          var opts = {};

          instance.yes4trackV1AdventuresIdDelete(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('yes4trackV1AdventuresIdExperiencesExperienceIdDelete', function() {
        it('should call yes4trackV1AdventuresIdExperiencesExperienceIdDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for yes4trackV1AdventuresIdExperiencesExperienceIdDelete call
          /*
          var opts = {};

          instance.yes4trackV1AdventuresIdExperiencesExperienceIdDelete(id, experienceId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('yes4trackV1AdventuresIdExperiencesExperienceIdPost', function() {
        it('should call yes4trackV1AdventuresIdExperiencesExperienceIdPost successfully', function(done) {
          // TODO: uncomment, update parameter values for yes4trackV1AdventuresIdExperiencesExperienceIdPost call
          /*
          var opts = {};

          instance.yes4trackV1AdventuresIdExperiencesExperienceIdPost(id, experienceId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('yes4trackV1AdventuresIdImagesImageIdDelete', function() {
        it('should call yes4trackV1AdventuresIdImagesImageIdDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for yes4trackV1AdventuresIdImagesImageIdDelete call
          /*
          var opts = {};

          instance.yes4trackV1AdventuresIdImagesImageIdDelete(id, imageId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('yes4trackV1AdventuresIdImagesPost', function() {
        it('should call yes4trackV1AdventuresIdImagesPost successfully', function(done) {
          // TODO: uncomment, update parameter values for yes4trackV1AdventuresIdImagesPost call and complete the assertions
          /*
          var opts = {};

          instance.yes4trackV1AdventuresIdImagesPost(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(&#x27;string&#x27;);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('yes4trackV1AdventuresIdLikesDelete', function() {
        it('should call yes4trackV1AdventuresIdLikesDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for yes4trackV1AdventuresIdLikesDelete call
          /*
          var opts = {};

          instance.yes4trackV1AdventuresIdLikesDelete(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('yes4trackV1AdventuresIdLikesGet', function() {
        it('should call yes4trackV1AdventuresIdLikesGet successfully', function(done) {
          // TODO: uncomment, update parameter values for yes4trackV1AdventuresIdLikesGet call and complete the assertions
          /*
          var opts = {};

          instance.yes4trackV1AdventuresIdLikesGet(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Caspianyes4TrackserviceApi.GetAllPagedAdventureLikesResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('yes4trackV1AdventuresIdLikesPost', function() {
        it('should call yes4trackV1AdventuresIdLikesPost successfully', function(done) {
          // TODO: uncomment, update parameter values for yes4trackV1AdventuresIdLikesPost call and complete the assertions
          /*
          var opts = {};

          instance.yes4trackV1AdventuresIdLikesPost(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Caspianyes4TrackserviceApi.PostAdventureLikesResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('yes4trackV1AdventuresIdPatch', function() {
        it('should call yes4trackV1AdventuresIdPatch successfully', function(done) {
          // TODO: uncomment, update parameter values for yes4trackV1AdventuresIdPatch call
          /*
          var opts = {};

          instance.yes4trackV1AdventuresIdPatch(body, id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('yes4trackV1AdventuresIdPut', function() {
        it('should call yes4trackV1AdventuresIdPut successfully', function(done) {
          // TODO: uncomment, update parameter values for yes4trackV1AdventuresIdPut call
          /*
          var opts = {};

          instance.yes4trackV1AdventuresIdPut(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('yes4trackV1AdventuresIdVideosPost', function() {
        it('should call yes4trackV1AdventuresIdVideosPost successfully', function(done) {
          // TODO: uncomment, update parameter values for yes4trackV1AdventuresIdVideosPost call and complete the assertions
          /*
          var opts = {};

          instance.yes4trackV1AdventuresIdVideosPost(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(&#x27;string&#x27;);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('yes4trackV1AdventuresIdVideosVideoIdDelete', function() {
        it('should call yes4trackV1AdventuresIdVideosVideoIdDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for yes4trackV1AdventuresIdVideosVideoIdDelete call
          /*
          var opts = {};

          instance.yes4trackV1AdventuresIdVideosVideoIdDelete(id, videoId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('yes4trackV1AdventuresPost', function() {
        it('should call yes4trackV1AdventuresPost successfully', function(done) {
          // TODO: uncomment, update parameter values for yes4trackV1AdventuresPost call and complete the assertions
          /*
          var opts = {};

          instance.yes4trackV1AdventuresPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Caspianyes4TrackserviceApi.PostAdventureResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
