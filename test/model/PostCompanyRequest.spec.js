/*
 * Caspian.Yes4Track.Service API
 * Caspian.Yes4Track.Service API
 *
 * OpenAPI spec version: v1
 * Contact: admin@yes4track.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.29
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Caspianyes4TrackserviceApi);
  }
}(this, function(expect, Caspianyes4TrackserviceApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('PostCompanyRequest', function() {
      beforeEach(function() {
        instance = new Caspianyes4TrackserviceApi.PostCompanyRequest();
      });

      it('should create an instance of PostCompanyRequest', function() {
        // TODO: update the code to test PostCompanyRequest
        expect(instance).to.be.a(Caspianyes4TrackserviceApi.PostCompanyRequest);
      });

      it('should have the property createdAt (base name: "createdAt")', function() {
        // TODO: update the code to test the property createdAt
        expect(instance).to.have.property('createdAt');
        // expect(instance.createdAt).to.be(expectedValueLiteral);
      });

      it('should have the property updatedAt (base name: "updatedAt")', function() {
        // TODO: update the code to test the property updatedAt
        expect(instance).to.have.property('updatedAt');
        // expect(instance.updatedAt).to.be(expectedValueLiteral);
      });

      it('should have the property userCreated (base name: "userCreated")', function() {
        // TODO: update the code to test the property userCreated
        expect(instance).to.have.property('userCreated');
        // expect(instance.userCreated).to.be(expectedValueLiteral);
      });

      it('should have the property userUpdated (base name: "userUpdated")', function() {
        // TODO: update the code to test the property userUpdated
        expect(instance).to.have.property('userUpdated');
        // expect(instance.userUpdated).to.be(expectedValueLiteral);
      });

      it('should have the property legalName (base name: "legalName")', function() {
        // TODO: update the code to test the property legalName
        expect(instance).to.have.property('legalName');
        // expect(instance.legalName).to.be(expectedValueLiteral);
      });

      it('should have the property fantasyName (base name: "fantasyName")', function() {
        // TODO: update the code to test the property fantasyName
        expect(instance).to.have.property('fantasyName');
        // expect(instance.fantasyName).to.be(expectedValueLiteral);
      });

      it('should have the property registrationNumber (base name: "registrationNumber")', function() {
        // TODO: update the code to test the property registrationNumber
        expect(instance).to.have.property('registrationNumber');
        // expect(instance.registrationNumber).to.be(expectedValueLiteral);
      });

      it('should have the property registrationType (base name: "registrationType")', function() {
        // TODO: update the code to test the property registrationType
        expect(instance).to.have.property('registrationType');
        // expect(instance.registrationType).to.be(expectedValueLiteral);
      });

      it('should have the property contactEmail (base name: "contactEmail")', function() {
        // TODO: update the code to test the property contactEmail
        expect(instance).to.have.property('contactEmail');
        // expect(instance.contactEmail).to.be(expectedValueLiteral);
      });

      it('should have the property contactPhone (base name: "contactPhone")', function() {
        // TODO: update the code to test the property contactPhone
        expect(instance).to.have.property('contactPhone');
        // expect(instance.contactPhone).to.be(expectedValueLiteral);
      });

      it('should have the property type (base name: "type")', function() {
        // TODO: update the code to test the property type
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

      it('should have the property biography (base name: "biography")', function() {
        // TODO: update the code to test the property biography
        expect(instance).to.have.property('biography');
        // expect(instance.biography).to.be(expectedValueLiteral);
      });

      it('should have the property profilePhoto (base name: "profilePhoto")', function() {
        // TODO: update the code to test the property profilePhoto
        expect(instance).to.have.property('profilePhoto');
        // expect(instance.profilePhoto).to.be(expectedValueLiteral);
      });

    });
  });

}));
