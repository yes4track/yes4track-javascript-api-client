/*
 * Caspian.Yes4Track.Service API
 * Caspian.Yes4Track.Service API
 *
 * OpenAPI spec version: v1
 * Contact: admin@yes4track.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.29
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Caspianyes4TrackserviceApi);
  }
}(this, function(expect, Caspianyes4TrackserviceApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('PostTrailResponse', function() {
      beforeEach(function() {
        instance = new Caspianyes4TrackserviceApi.PostTrailResponse();
      });

      it('should create an instance of PostTrailResponse', function() {
        // TODO: update the code to test PostTrailResponse
        expect(instance).to.be.a(Caspianyes4TrackserviceApi.PostTrailResponse);
      });

      it('should have the property createdAt (base name: "createdAt")', function() {
        // TODO: update the code to test the property createdAt
        expect(instance).to.have.property('createdAt');
        // expect(instance.createdAt).to.be(expectedValueLiteral);
      });

      it('should have the property updatedAt (base name: "updatedAt")', function() {
        // TODO: update the code to test the property updatedAt
        expect(instance).to.have.property('updatedAt');
        // expect(instance.updatedAt).to.be(expectedValueLiteral);
      });

      it('should have the property userCreated (base name: "userCreated")', function() {
        // TODO: update the code to test the property userCreated
        expect(instance).to.have.property('userCreated');
        // expect(instance.userCreated).to.be(expectedValueLiteral);
      });

      it('should have the property userUpdated (base name: "userUpdated")', function() {
        // TODO: update the code to test the property userUpdated
        expect(instance).to.have.property('userUpdated');
        // expect(instance.userUpdated).to.be(expectedValueLiteral);
      });

      it('should have the property adventureId (base name: "adventureId")', function() {
        // TODO: update the code to test the property adventureId
        expect(instance).to.have.property('adventureId');
        // expect(instance.adventureId).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property startDate (base name: "startDate")', function() {
        // TODO: update the code to test the property startDate
        expect(instance).to.have.property('startDate');
        // expect(instance.startDate).to.be(expectedValueLiteral);
      });

      it('should have the property endDate (base name: "endDate")', function() {
        // TODO: update the code to test the property endDate
        expect(instance).to.have.property('endDate');
        // expect(instance.endDate).to.be(expectedValueLiteral);
      });

      it('should have the property type (base name: "type")', function() {
        // TODO: update the code to test the property type
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property sponsors (base name: "sponsors")', function() {
        // TODO: update the code to test the property sponsors
        expect(instance).to.have.property('sponsors');
        // expect(instance.sponsors).to.be(expectedValueLiteral);
      });

      it('should have the property angels (base name: "angels")', function() {
        // TODO: update the code to test the property angels
        expect(instance).to.have.property('angels');
        // expect(instance.angels).to.be(expectedValueLiteral);
      });

      it('should have the property adventureName (base name: "adventureName")', function() {
        // TODO: update the code to test the property adventureName
        expect(instance).to.have.property('adventureName');
        // expect(instance.adventureName).to.be(expectedValueLiteral);
      });

      it('should have the property adventureLevel (base name: "adventureLevel")', function() {
        // TODO: update the code to test the property adventureLevel
        expect(instance).to.have.property('adventureLevel');
        // expect(instance.adventureLevel).to.be(expectedValueLiteral);
      });

      it('should have the property adventureType (base name: "adventureType")', function() {
        // TODO: update the code to test the property adventureType
        expect(instance).to.have.property('adventureType');
        // expect(instance.adventureType).to.be(expectedValueLiteral);
      });

      it('should have the property photoUrl (base name: "photoUrl")', function() {
        // TODO: update the code to test the property photoUrl
        expect(instance).to.have.property('photoUrl');
        // expect(instance.photoUrl).to.be(expectedValueLiteral);
      });

      it('should have the property adventureDescription (base name: "adventureDescription")', function() {
        // TODO: update the code to test the property adventureDescription
        expect(instance).to.have.property('adventureDescription');
        // expect(instance.adventureDescription).to.be(expectedValueLiteral);
      });

      it('should have the property waypoints (base name: "waypoints")', function() {
        // TODO: update the code to test the property waypoints
        expect(instance).to.have.property('waypoints');
        // expect(instance.waypoints).to.be(expectedValueLiteral);
      });

    });
  });

}));
