/*
 * Caspian.Yes4Track.Service API
 * Caspian.Yes4Track.Service API
 *
 * OpenAPI spec version: v1
 * Contact: admin@yes4track.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.29
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {AdventureType} from '../model/AdventureType';
import {ErrorDetails} from '../model/ErrorDetails';
import {GetAllAdventureLikesResponse} from '../model/GetAllAdventureLikesResponse';
import {GetAllAdventureResponse} from '../model/GetAllAdventureResponse';
import {GetAllPagedAdventureLikesResponse} from '../model/GetAllPagedAdventureLikesResponse';
import {GetAllPagedAdventureResponse} from '../model/GetAllPagedAdventureResponse';
import {GetByIdAdventureCodeResponse} from '../model/GetByIdAdventureCodeResponse';
import {GetUserLikedAdventureResponse} from '../model/GetUserLikedAdventureResponse';
import {LevelType} from '../model/LevelType';
import {Operation} from '../model/Operation';
import {PostAdventureLikesResponse} from '../model/PostAdventureLikesResponse';
import {PostAdventureRequest} from '../model/PostAdventureRequest';
import {PostAdventureResponse} from '../model/PostAdventureResponse';
import {PostCheckAdventureCodeResponse} from '../model/PostCheckAdventureCodeResponse';
import {PutAdventureRequest} from '../model/PutAdventureRequest';

/**
* Adventure service.
* @module api/AdventureApi
* @version v1
*/
export class AdventureApi {

    /**
    * Constructs a new AdventureApi. 
    * @alias module:api/AdventureApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the getByIdAdventure operation.
     * @callback moduleapi/AdventureApi~getByIdAdventureCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAllAdventureResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Adventure by id
     * @param {String} id Adventure id
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/AdventureApi~getByIdAdventureCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getByIdAdventure(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getByIdAdventure");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAllAdventureResponse;

      return this.apiClient.callApi(
        '/yes4track/v1/adventures/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getByIdAdventureCode operation.
     * @callback moduleapi/AdventureApi~getByIdAdventureCodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetByIdAdventureCodeResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Adventure Code by id
     * @param {String} id Adventure id
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/AdventureApi~getByIdAdventureCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getByIdAdventureCode(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getByIdAdventureCode");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetByIdAdventureCodeResponse;

      return this.apiClient.callApi(
        '/yes4track/v1/adventures/{id}/code', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getByIdAdventureLikes operation.
     * @callback moduleapi/AdventureApi~getByIdAdventureLikesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAllAdventureLikesResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Adventure Like by id
     * @param {String} id Adventure Id
     * @param {String} likeId Adventure Like Id
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/AdventureApi~getByIdAdventureLikesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getByIdAdventureLikes(id, likeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getByIdAdventureLikes");
      }
      // verify the required parameter 'likeId' is set
      if (likeId === undefined || likeId === null) {
        throw new Error("Missing the required parameter 'likeId' when calling getByIdAdventureLikes");
      }

      let pathParams = {
        'id': id,'likeId': likeId
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAllAdventureLikesResponse;

      return this.apiClient.callApi(
        '/yes4track/v1/adventures/{id}/likes/{likeId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getUserLikedAdventure operation.
     * @callback moduleapi/AdventureApi~getUserLikedAdventureCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetUserLikedAdventureResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get User Liked Adventure
     * @param {String} id Adventure Id
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/AdventureApi~getUserLikedAdventureCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getUserLikedAdventure(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getUserLikedAdventure");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetUserLikedAdventureResponse;

      return this.apiClient.callApi(
        '/yes4track/v1/adventures/{id}/likes/userLiked', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the yes4trackV1AdventuresGet operation.
     * @callback moduleapi/AdventureApi~yes4trackV1AdventuresGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAllPagedAdventureResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Adventure by filter with pagination
     * @param {Object} opts Optional parameters
     * @param {String} opts.companyId 
     * @param {String} opts.name 
     * @param {String} opts.description 
     * @param {module:model/LevelType} opts.level 
     * @param {Boolean} opts.codeRequired 
     * @param {Boolean} opts.isActive 
     * @param {module:model/AdventureType} opts.type 
     * @param {Number} opts.page 
     * @param {Number} opts.pageSize 
     * @param {String} opts.sort Sorting atributes, sample: id.desc,name.asc
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/AdventureApi~yes4trackV1AdventuresGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    yes4trackV1AdventuresGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'companyId': opts['companyId'],'name': opts['name'],'description': opts['description'],'level': opts['level'],'codeRequired': opts['codeRequired'],'isActive': opts['isActive'],'type': opts['type'],'page': opts['page'],'pageSize': opts['pageSize'],'sort': opts['sort']
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAllPagedAdventureResponse;

      return this.apiClient.callApi(
        '/yes4track/v1/adventures', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the yes4trackV1AdventuresIdActivatePost operation.
     * @callback moduleapi/AdventureApi~yes4trackV1AdventuresIdActivatePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Activate Adventure
     * @param {String} id Adventure id
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/AdventureApi~yes4trackV1AdventuresIdActivatePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    yes4trackV1AdventuresIdActivatePost(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling yes4trackV1AdventuresIdActivatePost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/yes4track/v1/adventures/{id}/activate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the yes4trackV1AdventuresIdCodeCodeCheckPost operation.
     * @callback moduleapi/AdventureApi~yes4trackV1AdventuresIdCodeCodeCheckPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostCheckAdventureCodeResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check Adventure Code
     * @param {String} id Adventure id
     * @param {String} code Adventure Code
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/AdventureApi~yes4trackV1AdventuresIdCodeCodeCheckPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    yes4trackV1AdventuresIdCodeCodeCheckPost(id, code, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling yes4trackV1AdventuresIdCodeCodeCheckPost");
      }
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling yes4trackV1AdventuresIdCodeCodeCheckPost");
      }

      let pathParams = {
        'id': id,'code': code
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PostCheckAdventureCodeResponse;

      return this.apiClient.callApi(
        '/yes4track/v1/adventures/{id}/code/{code}/check', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the yes4trackV1AdventuresIdDelete operation.
     * @callback moduleapi/AdventureApi~yes4trackV1AdventuresIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Adventure by Id
     * @param {String} id Adventure id
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/AdventureApi~yes4trackV1AdventuresIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    yes4trackV1AdventuresIdDelete(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling yes4trackV1AdventuresIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/yes4track/v1/adventures/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the yes4trackV1AdventuresIdExperiencesExperienceIdDelete operation.
     * @callback moduleapi/AdventureApi~yes4trackV1AdventuresIdExperiencesExperienceIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Adventure Experience
     * @param {String} id Id Adventure
     * @param {String} experienceId Id Experience
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/AdventureApi~yes4trackV1AdventuresIdExperiencesExperienceIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    yes4trackV1AdventuresIdExperiencesExperienceIdDelete(id, experienceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling yes4trackV1AdventuresIdExperiencesExperienceIdDelete");
      }
      // verify the required parameter 'experienceId' is set
      if (experienceId === undefined || experienceId === null) {
        throw new Error("Missing the required parameter 'experienceId' when calling yes4trackV1AdventuresIdExperiencesExperienceIdDelete");
      }

      let pathParams = {
        'id': id,'experienceId': experienceId
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/yes4track/v1/adventures/{id}/experiences/{experienceId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the yes4trackV1AdventuresIdExperiencesExperienceIdPost operation.
     * @callback moduleapi/AdventureApi~yes4trackV1AdventuresIdExperiencesExperienceIdPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Adventure Experience
     * @param {String} id Id Adventure
     * @param {String} experienceId Id Experience
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/AdventureApi~yes4trackV1AdventuresIdExperiencesExperienceIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    yes4trackV1AdventuresIdExperiencesExperienceIdPost(id, experienceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling yes4trackV1AdventuresIdExperiencesExperienceIdPost");
      }
      // verify the required parameter 'experienceId' is set
      if (experienceId === undefined || experienceId === null) {
        throw new Error("Missing the required parameter 'experienceId' when calling yes4trackV1AdventuresIdExperiencesExperienceIdPost");
      }

      let pathParams = {
        'id': id,'experienceId': experienceId
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/yes4track/v1/adventures/{id}/experiences/{experienceId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the yes4trackV1AdventuresIdImagesImageIdDelete operation.
     * @callback moduleapi/AdventureApi~yes4trackV1AdventuresIdImagesImageIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Adventure by Id
     * @param {String} id Adventure id
     * @param {String} imageId Adventure Image id
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/AdventureApi~yes4trackV1AdventuresIdImagesImageIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    yes4trackV1AdventuresIdImagesImageIdDelete(id, imageId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling yes4trackV1AdventuresIdImagesImageIdDelete");
      }
      // verify the required parameter 'imageId' is set
      if (imageId === undefined || imageId === null) {
        throw new Error("Missing the required parameter 'imageId' when calling yes4trackV1AdventuresIdImagesImageIdDelete");
      }

      let pathParams = {
        'id': id,'imageId': imageId
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/yes4track/v1/adventures/{id}/images/{imageId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the yes4trackV1AdventuresIdImagesPost operation.
     * @callback moduleapi/AdventureApi~yes4trackV1AdventuresIdImagesPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'String'>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add images in adventure
     * @param {String} id Adventure Id
     * @param {Object} opts Optional parameters
     * @param {Array.<Blob>} opts.images 
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/AdventureApi~yes4trackV1AdventuresIdImagesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    yes4trackV1AdventuresIdImagesPost(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling yes4trackV1AdventuresIdImagesPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        'images': this.apiClient.buildCollectionParam(opts['images'], 'multi')
      };

      let authNames = ['Bearer'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ['String'];

      return this.apiClient.callApi(
        '/yes4track/v1/adventures/{id}/images', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the yes4trackV1AdventuresIdLikesDelete operation.
     * @callback moduleapi/AdventureApi~yes4trackV1AdventuresIdLikesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Adventure Likes by Id
     * @param {String} id Adventure Id
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/AdventureApi~yes4trackV1AdventuresIdLikesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    yes4trackV1AdventuresIdLikesDelete(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling yes4trackV1AdventuresIdLikesDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/yes4track/v1/adventures/{id}/likes', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the yes4trackV1AdventuresIdLikesGet operation.
     * @callback moduleapi/AdventureApi~yes4trackV1AdventuresIdLikesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAllPagedAdventureLikesResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Adventure Likes by filter with pagination
     * @param {String} id Adventure Id
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.pageSize 
     * @param {String} opts.sort Sorting atributes, sample: id.desc,name.asc
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/AdventureApi~yes4trackV1AdventuresIdLikesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    yes4trackV1AdventuresIdLikesGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling yes4trackV1AdventuresIdLikesGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'page': opts['page'],'pageSize': opts['pageSize'],'sort': opts['sort']
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAllPagedAdventureLikesResponse;

      return this.apiClient.callApi(
        '/yes4track/v1/adventures/{id}/likes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the yes4trackV1AdventuresIdLikesPost operation.
     * @callback moduleapi/AdventureApi~yes4trackV1AdventuresIdLikesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostAdventureLikesResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Adventure Likes
     * @param {String} id Adventure Id
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/AdventureApi~yes4trackV1AdventuresIdLikesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    yes4trackV1AdventuresIdLikesPost(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling yes4trackV1AdventuresIdLikesPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PostAdventureLikesResponse;

      return this.apiClient.callApi(
        '/yes4track/v1/adventures/{id}/likes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the yes4trackV1AdventuresIdPatch operation.
     * @callback moduleapi/AdventureApi~yes4trackV1AdventuresIdPatchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update part of Adventure
     * Sample request:                    PATCH /yes4track/v1/adventures/{id}      [          {              \&quot;op\&quot;: \&quot;replace\&quot;,              \&quot;path\&quot;: \&quot;/atribute_name\&quot;,              \&quot;value\&quot;: \&quot;new value\&quot;          }      ]
     * @param {Array.<module:model/Operation>} body Atributes values
     * @param {String} id Adventure id
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/AdventureApi~yes4trackV1AdventuresIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    yes4trackV1AdventuresIdPatch(body, id, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling yes4trackV1AdventuresIdPatch");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling yes4trackV1AdventuresIdPatch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/yes4track/v1/adventures/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the yes4trackV1AdventuresIdPut operation.
     * @callback moduleapi/AdventureApi~yes4trackV1AdventuresIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Adventure
     * @param {String} id Adventure Id
     * @param {Object} opts Optional parameters
     * @param {module:model/PutAdventureRequest} opts.body Adventure to update
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/AdventureApi~yes4trackV1AdventuresIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    yes4trackV1AdventuresIdPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling yes4trackV1AdventuresIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/yes4track/v1/adventures/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the yes4trackV1AdventuresIdVideosPost operation.
     * @callback moduleapi/AdventureApi~yes4trackV1AdventuresIdVideosPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'String'>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add videos in adventure
     * @param {String} id Adventure Id
     * @param {Object} opts Optional parameters
     * @param {Array.<Blob>} opts.videos 
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/AdventureApi~yes4trackV1AdventuresIdVideosPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    yes4trackV1AdventuresIdVideosPost(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling yes4trackV1AdventuresIdVideosPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        'videos': this.apiClient.buildCollectionParam(opts['videos'], 'multi')
      };

      let authNames = ['Bearer'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ['String'];

      return this.apiClient.callApi(
        '/yes4track/v1/adventures/{id}/videos', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the yes4trackV1AdventuresIdVideosVideoIdDelete operation.
     * @callback moduleapi/AdventureApi~yes4trackV1AdventuresIdVideosVideoIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Adventure by Id
     * @param {String} id Adventure id
     * @param {String} videoId Adventure Video id
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/AdventureApi~yes4trackV1AdventuresIdVideosVideoIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    yes4trackV1AdventuresIdVideosVideoIdDelete(id, videoId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling yes4trackV1AdventuresIdVideosVideoIdDelete");
      }
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling yes4trackV1AdventuresIdVideosVideoIdDelete");
      }

      let pathParams = {
        'id': id,'videoId': videoId
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/yes4track/v1/adventures/{id}/videos/{videoId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the yes4trackV1AdventuresPost operation.
     * @callback moduleapi/AdventureApi~yes4trackV1AdventuresPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostAdventureResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Adventure
     * @param {Object} opts Optional parameters
     * @param {module:model/PostAdventureRequest} opts.body Adventure to create
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/AdventureApi~yes4trackV1AdventuresPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    yes4trackV1AdventuresPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PostAdventureResponse;

      return this.apiClient.callApi(
        '/yes4track/v1/adventures', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}