/*
 * Caspian.Yes4Track.Service API
 * Caspian.Yes4Track.Service API
 *
 * OpenAPI spec version: v1
 * Contact: admin@yes4track.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.29
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {ErrorDetails} from '../model/ErrorDetails';
import {GetAllPagedTrackResponse} from '../model/GetAllPagedTrackResponse';
import {GetAllTrackResponse} from '../model/GetAllTrackResponse';
import {Operation} from '../model/Operation';
import {PostTrackGeoDataResponse} from '../model/PostTrackGeoDataResponse';
import {PostTrackRequest} from '../model/PostTrackRequest';
import {PostTrackResponse} from '../model/PostTrackResponse';
import {PutTrackRequest} from '../model/PutTrackRequest';
import {PutTrackStatisticRequest} from '../model/PutTrackStatisticRequest';
import {TrackGeoLocationDto} from '../model/TrackGeoLocationDto';
import {TrackSource} from '../model/TrackSource';

/**
* Track service.
* @module api/TrackApi
* @version v1
*/
export class TrackApi {

    /**
    * Constructs a new TrackApi. 
    * @alias module:api/TrackApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the getByIdTrack operation.
     * @callback moduleapi/TrackApi~getByIdTrackCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAllTrackResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Track by id
     * @param {String} id Track id
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/TrackApi~getByIdTrackCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getByIdTrack(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getByIdTrack");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAllTrackResponse;

      return this.apiClient.callApi(
        '/yes4track/v1/tracks/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getByIdTrackGeoData operation.
     * @callback moduleapi/TrackApi~getByIdTrackGeoDataCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Track Geo Data by id
     * @param {String} id Track id
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/TrackApi~getByIdTrackGeoDataCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getByIdTrackGeoData(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getByIdTrackGeoData");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/yes4track/v1/tracks/{id}/geodata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getByIdTrackGeoLocation operation.
     * @callback moduleapi/TrackApi~getByIdTrackGeoLocationCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TrackGeoLocationDto>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Track Geo Location by id
     * @param {Object} opts Optional parameters
     * @param {String} opts.trackId Track id
     * @param {String} opts.adventureId Track id
     * @param {String} opts.experienceId Track id
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/TrackApi~getByIdTrackGeoLocationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getByIdTrackGeoLocation(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'trackId': opts['trackId'],'adventureId': opts['adventureId'],'experienceId': opts['experienceId']
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TrackGeoLocationDto];

      return this.apiClient.callApi(
        '/yes4track/v1/tracks/geolocation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the yes4trackV1TracksGet operation.
     * @callback moduleapi/TrackApi~yes4trackV1TracksGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAllPagedTrackResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Track by filter with pagination
     * @param {String} adventureId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.name 
     * @param {module:model/TrackSource} opts.source 
     * @param {Number} opts.page 
     * @param {Number} opts.pageSize 
     * @param {String} opts.sort Sorting atributes, sample: id.desc,name.asc
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/TrackApi~yes4trackV1TracksGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    yes4trackV1TracksGet(adventureId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'adventureId' is set
      if (adventureId === undefined || adventureId === null) {
        throw new Error("Missing the required parameter 'adventureId' when calling yes4trackV1TracksGet");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'adventureId': adventureId,'name': opts['name'],'source': opts['source'],'page': opts['page'],'pageSize': opts['pageSize'],'sort': opts['sort']
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAllPagedTrackResponse;

      return this.apiClient.callApi(
        '/yes4track/v1/tracks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the yes4trackV1TracksIdDelete operation.
     * @callback moduleapi/TrackApi~yes4trackV1TracksIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Track by Id
     * @param {String} id Track id
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/TrackApi~yes4trackV1TracksIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    yes4trackV1TracksIdDelete(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling yes4trackV1TracksIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/yes4track/v1/tracks/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the yes4trackV1TracksIdGeodataPost operation.
     * @callback moduleapi/TrackApi~yes4trackV1TracksIdGeodataPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostTrackGeoDataResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Track GeoData
     * @param {String} id Track Id
     * @param {Object} opts Optional parameters
     * @param {Array.<Blob>} opts.files 
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/TrackApi~yes4trackV1TracksIdGeodataPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    yes4trackV1TracksIdGeodataPost(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling yes4trackV1TracksIdGeodataPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        'files': this.apiClient.buildCollectionParam(opts['files'], 'multi')
      };

      let authNames = ['Bearer'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = PostTrackGeoDataResponse;

      return this.apiClient.callApi(
        '/yes4track/v1/tracks/{id}/geodata', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the yes4trackV1TracksIdPatch operation.
     * @callback moduleapi/TrackApi~yes4trackV1TracksIdPatchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update part of Track
     * Sample request:                    PATCH /yes4track/v1/Track/{id}      [          {              \&quot;op\&quot;: \&quot;replace\&quot;,              \&quot;path\&quot;: \&quot;/atribute_name\&quot;,              \&quot;value\&quot;: \&quot;new value\&quot;          }      ]
     * @param {Array.<module:model/Operation>} body Atributes values
     * @param {String} id Track id
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/TrackApi~yes4trackV1TracksIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    yes4trackV1TracksIdPatch(body, id, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling yes4trackV1TracksIdPatch");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling yes4trackV1TracksIdPatch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/yes4track/v1/tracks/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the yes4trackV1TracksIdPut operation.
     * @callback moduleapi/TrackApi~yes4trackV1TracksIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Track
     * @param {String} id Track Id
     * @param {Object} opts Optional parameters
     * @param {module:model/PutTrackRequest} opts.body Track to update
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/TrackApi~yes4trackV1TracksIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    yes4trackV1TracksIdPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling yes4trackV1TracksIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/yes4track/v1/tracks/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the yes4trackV1TracksIdStatisticPut operation.
     * @callback moduleapi/TrackApi~yes4trackV1TracksIdStatisticPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Track Statistic
     * @param {String} id Track Id
     * @param {Object} opts Optional parameters
     * @param {module:model/PutTrackStatisticRequest} opts.body Track to update
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/TrackApi~yes4trackV1TracksIdStatisticPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    yes4trackV1TracksIdStatisticPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling yes4trackV1TracksIdStatisticPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/yes4track/v1/tracks/{id}/statistic', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the yes4trackV1TracksPost operation.
     * @callback moduleapi/TrackApi~yes4trackV1TracksPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostTrackResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Track
     * @param {Object} opts Optional parameters
     * @param {module:model/PostTrackRequest} opts.body Track to create
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/TrackApi~yes4trackV1TracksPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    yes4trackV1TracksPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PostTrackResponse;

      return this.apiClient.callApi(
        '/yes4track/v1/tracks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}