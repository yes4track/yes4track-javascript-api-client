/*
 * Caspian.Yes4Track.Service API
 * Caspian.Yes4Track.Service API
 *
 * OpenAPI spec version: v1
 * Contact: admin@yes4track.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.29
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {ErrorDetails} from '../model/ErrorDetails';
import {GetAllPagedUserResponse} from '../model/GetAllPagedUserResponse';
import {GetAllUserPushTokenResponse} from '../model/GetAllUserPushTokenResponse';
import {GetAllUserResponse} from '../model/GetAllUserResponse';
import {Operation} from '../model/Operation';
import {PostPostUserResendCodeRequest} from '../model/PostPostUserResendCodeRequest';
import {PostUserAccessTokenRequest} from '../model/PostUserAccessTokenRequest';
import {PostUserAccessTokenResponse} from '../model/PostUserAccessTokenResponse';
import {PostUserPushTokenRequest} from '../model/PostUserPushTokenRequest';
import {PostUserRequest} from '../model/PostUserRequest';
import {PostUserResponse} from '../model/PostUserResponse';
import {PostUserSetupAngelRequest} from '../model/PostUserSetupAngelRequest';
import {PostUserSignInRequest} from '../model/PostUserSignInRequest';
import {PostUserSignInResponse} from '../model/PostUserSignInResponse';
import {ProfilePhotoRequest} from '../model/ProfilePhotoRequest';
import {PutUserLocationRequest} from '../model/PutUserLocationRequest';
import {PutUserRequest} from '../model/PutUserRequest';

/**
* User service.
* @module api/UserApi
* @version v1
*/
export class UserApi {

    /**
    * Constructs a new UserApi. 
    * @alias module:api/UserApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the getByIdUser operation.
     * @callback moduleapi/UserApi~getByIdUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAllUserResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get User by id
     * @param {String} id User id
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/UserApi~getByIdUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getByIdUser(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getByIdUser");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAllUserResponse;

      return this.apiClient.callApi(
        '/yes4track/v1/users/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the yes4trackV1UsersAccesstokenPost operation.
     * @callback moduleapi/UserApi~yes4trackV1UsersAccesstokenPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostUserAccessTokenResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * User SignIn
     * @param {Object} opts Optional parameters
     * @param {module:model/PostUserAccessTokenRequest} opts.body User to SignIn
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/UserApi~yes4trackV1UsersAccesstokenPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    yes4trackV1UsersAccesstokenPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PostUserAccessTokenResponse;

      return this.apiClient.callApi(
        '/yes4track/v1/users/accesstoken', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the yes4trackV1UsersGet operation.
     * @callback moduleapi/UserApi~yes4trackV1UsersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAllPagedUserResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All User by filter with pagination
     * @param {Object} opts Optional parameters
     * @param {String} opts.name 
     * @param {String} opts.phone 
     * @param {String} opts.email 
     * @param {Boolean} opts.isActive 
     * @param {Boolean} opts.isAdmin 
     * @param {String} opts.companyId 
     * @param {Number} opts.page 
     * @param {Number} opts.pageSize 
     * @param {String} opts.sort Sorting atributes, sample: id.desc,name.asc
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/UserApi~yes4trackV1UsersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    yes4trackV1UsersGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'name': opts['name'],'phone': opts['phone'],'email': opts['email'],'isActive': opts['isActive'],'isAdmin': opts['isAdmin'],'companyId': opts['companyId'],'page': opts['page'],'pageSize': opts['pageSize'],'sort': opts['sort']
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAllPagedUserResponse;

      return this.apiClient.callApi(
        '/yes4track/v1/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the yes4trackV1UsersIdCompaniesCompanyIdDelete operation.
     * @callback moduleapi/UserApi~yes4trackV1UsersIdCompaniesCompanyIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete User Company
     * @param {String} id Id User
     * @param {String} companyId Id Company
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/UserApi~yes4trackV1UsersIdCompaniesCompanyIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    yes4trackV1UsersIdCompaniesCompanyIdDelete(id, companyId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling yes4trackV1UsersIdCompaniesCompanyIdDelete");
      }
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling yes4trackV1UsersIdCompaniesCompanyIdDelete");
      }

      let pathParams = {
        'id': id,'companyId': companyId
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/yes4track/v1/users/{id}/companies/{companyId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the yes4trackV1UsersIdCompaniesCompanyIdPost operation.
     * @callback moduleapi/UserApi~yes4trackV1UsersIdCompaniesCompanyIdPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add User Company
     * @param {String} id Id User
     * @param {String} companyId Id Company
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/UserApi~yes4trackV1UsersIdCompaniesCompanyIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    yes4trackV1UsersIdCompaniesCompanyIdPost(id, companyId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling yes4trackV1UsersIdCompaniesCompanyIdPost");
      }
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling yes4trackV1UsersIdCompaniesCompanyIdPost");
      }

      let pathParams = {
        'id': id,'companyId': companyId
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/yes4track/v1/users/{id}/companies/{companyId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the yes4trackV1UsersIdDelete operation.
     * @callback moduleapi/UserApi~yes4trackV1UsersIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete User by Id
     * @param {String} id User id
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/UserApi~yes4trackV1UsersIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    yes4trackV1UsersIdDelete(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling yes4trackV1UsersIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/yes4track/v1/users/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the yes4trackV1UsersIdLocationPut operation.
     * @callback moduleapi/UserApi~yes4trackV1UsersIdLocationPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update User Location
     * @param {String} id User Id
     * @param {Object} opts Optional parameters
     * @param {module:model/PutUserLocationRequest} opts.body GeoLocation and Date
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/UserApi~yes4trackV1UsersIdLocationPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    yes4trackV1UsersIdLocationPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling yes4trackV1UsersIdLocationPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/yes4track/v1/users/{id}/location', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the yes4trackV1UsersIdPatch operation.
     * @callback moduleapi/UserApi~yes4trackV1UsersIdPatchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update part of User
     * @param {Array.<module:model/Operation>} body Atributes values
     * @param {String} id User id
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/UserApi~yes4trackV1UsersIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    yes4trackV1UsersIdPatch(body, id, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling yes4trackV1UsersIdPatch");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling yes4trackV1UsersIdPatch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/yes4track/v1/users/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the yes4trackV1UsersIdPhotoPut operation.
     * @callback moduleapi/UserApi~yes4trackV1UsersIdPhotoPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update User Photo
     * @param {String} id User Id
     * @param {Object} opts Optional parameters
     * @param {module:model/ProfilePhotoRequest} opts.body User to update
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/UserApi~yes4trackV1UsersIdPhotoPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    yes4trackV1UsersIdPhotoPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling yes4trackV1UsersIdPhotoPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/yes4track/v1/users/{id}/photo', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the yes4trackV1UsersIdPushtokenDelete operation.
     * @callback moduleapi/UserApi~yes4trackV1UsersIdPushtokenDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete User Push Token
     * @param {String} id Id User
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/UserApi~yes4trackV1UsersIdPushtokenDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    yes4trackV1UsersIdPushtokenDelete(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling yes4trackV1UsersIdPushtokenDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/yes4track/v1/users/{id}/pushtoken', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the yes4trackV1UsersIdPushtokenGet operation.
     * @callback moduleapi/UserApi~yes4trackV1UsersIdPushtokenGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAllUserPushTokenResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All User Push Token
     * @param {String} id User Id
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/UserApi~yes4trackV1UsersIdPushtokenGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    yes4trackV1UsersIdPushtokenGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling yes4trackV1UsersIdPushtokenGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAllUserPushTokenResponse;

      return this.apiClient.callApi(
        '/yes4track/v1/users/{id}/pushtoken', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the yes4trackV1UsersIdPushtokenPost operation.
     * @callback moduleapi/UserApi~yes4trackV1UsersIdPushtokenPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add User Push Token
     * @param {String} id Id User
     * @param {Object} opts Optional parameters
     * @param {module:model/PostUserPushTokenRequest} opts.body FCM Token
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/UserApi~yes4trackV1UsersIdPushtokenPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    yes4trackV1UsersIdPushtokenPost(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling yes4trackV1UsersIdPushtokenPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/yes4track/v1/users/{id}/pushtoken', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the yes4trackV1UsersIdPut operation.
     * @callback moduleapi/UserApi~yes4trackV1UsersIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update User
     * @param {String} id User Id
     * @param {Object} opts Optional parameters
     * @param {module:model/PutUserRequest} opts.body User to update
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/UserApi~yes4trackV1UsersIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    yes4trackV1UsersIdPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling yes4trackV1UsersIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/yes4track/v1/users/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the yes4trackV1UsersPost operation.
     * @callback moduleapi/UserApi~yes4trackV1UsersPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostUserResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add User
     * @param {Object} opts Optional parameters
     * @param {module:model/PostUserRequest} opts.body User to create
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/UserApi~yes4trackV1UsersPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    yes4trackV1UsersPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PostUserResponse;

      return this.apiClient.callApi(
        '/yes4track/v1/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the yes4trackV1UsersResendcodePost operation.
     * @callback moduleapi/UserApi~yes4trackV1UsersResendcodePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resend Code
     * @param {Object} opts Optional parameters
     * @param {module:model/PostPostUserResendCodeRequest} opts.body Phone and Hash
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/UserApi~yes4trackV1UsersResendcodePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    yes4trackV1UsersResendcodePost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/yes4track/v1/users/resendcode', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the yes4trackV1UsersSetupangelPost operation.
     * @callback moduleapi/UserApi~yes4trackV1UsersSetupangelPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Setup User default Angel
     * @param {Object} opts Optional parameters
     * @param {module:model/PostUserSetupAngelRequest} opts.body Angel to Setup
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/UserApi~yes4trackV1UsersSetupangelPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    yes4trackV1UsersSetupangelPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/yes4track/v1/users/setupangel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the yes4trackV1UsersSetupsponsorIdPost operation.
     * @callback moduleapi/UserApi~yes4trackV1UsersSetupsponsorIdPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Setup User default Sponsor
     * @param {String} id Sponsor Id
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/UserApi~yes4trackV1UsersSetupsponsorIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    yes4trackV1UsersSetupsponsorIdPost(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling yes4trackV1UsersSetupsponsorIdPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/yes4track/v1/users/setupsponsor/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the yes4trackV1UsersSigninPost operation.
     * @callback moduleapi/UserApi~yes4trackV1UsersSigninPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostUserSignInResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * User SignIn
     * @param {Object} opts Optional parameters
     * @param {module:model/PostUserSignInRequest} opts.body User to SignIn
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/UserApi~yes4trackV1UsersSigninPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    yes4trackV1UsersSigninPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PostUserSignInResponse;

      return this.apiClient.callApi(
        '/yes4track/v1/users/signin', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the yes4trackV1UsersSignupPost operation.
     * @callback moduleapi/UserApi~yes4trackV1UsersSignupPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostUserResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * User SignUp
     * @param {Object} opts Optional parameters
     * @param {module:model/PostUserRequest} opts.body User to create
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/UserApi~yes4trackV1UsersSignupPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    yes4trackV1UsersSignupPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PostUserResponse;

      return this.apiClient.callApi(
        '/yes4track/v1/users/signup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}