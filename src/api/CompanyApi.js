/*
 * Caspian.Yes4Track.Service API
 * Caspian.Yes4Track.Service API
 *
 * OpenAPI spec version: v1
 * Contact: admin@yes4track.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.29
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {CompanyType} from '../model/CompanyType';
import {ErrorDetails} from '../model/ErrorDetails';
import {GetAllCompanyResponse} from '../model/GetAllCompanyResponse';
import {GetAllPagedCompanyResponse} from '../model/GetAllPagedCompanyResponse';
import {Operation} from '../model/Operation';
import {PostCompanyRequest} from '../model/PostCompanyRequest';
import {PostCompanyResponse} from '../model/PostCompanyResponse';
import {PutCompanyRequest} from '../model/PutCompanyRequest';
import {RegistrationType} from '../model/RegistrationType';

/**
* Company service.
* @module api/CompanyApi
* @version v1
*/
export class CompanyApi {

    /**
    * Constructs a new CompanyApi. 
    * @alias module:api/CompanyApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the getByIdCompany operation.
     * @callback moduleapi/CompanyApi~getByIdCompanyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAllCompanyResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Company by id
     * @param {String} id Company id
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/CompanyApi~getByIdCompanyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getByIdCompany(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getByIdCompany");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAllCompanyResponse;

      return this.apiClient.callApi(
        '/yes4track/v1/companies/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the yes4trackV1CompaniesGet operation.
     * @callback moduleapi/CompanyApi~yes4trackV1CompaniesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAllPagedCompanyResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Company by filter with pagination
     * @param {Object} opts Optional parameters
     * @param {String} opts.legalName 
     * @param {String} opts.fantasyName 
     * @param {String} opts.registrationNumber 
     * @param {String} opts.contactEmail 
     * @param {String} opts.contactPhone 
     * @param {String} opts.companies 
     * @param {module:model/CompanyType} opts.type 
     * @param {module:model/RegistrationType} opts.registrationType 
     * @param {Number} opts.page 
     * @param {Number} opts.pageSize 
     * @param {String} opts.sort Sorting atributes, sample: id.desc,name.asc
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/CompanyApi~yes4trackV1CompaniesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    yes4trackV1CompaniesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'legalName': opts['legalName'],'fantasyName': opts['fantasyName'],'registrationNumber': opts['registrationNumber'],'contactEmail': opts['contactEmail'],'contactPhone': opts['contactPhone'],'companies': opts['companies'],'type': opts['type'],'registrationType': opts['registrationType'],'page': opts['page'],'pageSize': opts['pageSize'],'sort': opts['sort']
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAllPagedCompanyResponse;

      return this.apiClient.callApi(
        '/yes4track/v1/companies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the yes4trackV1CompaniesIdDelete operation.
     * @callback moduleapi/CompanyApi~yes4trackV1CompaniesIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Company by Id
     * @param {String} id Company id
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/CompanyApi~yes4trackV1CompaniesIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    yes4trackV1CompaniesIdDelete(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling yes4trackV1CompaniesIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/yes4track/v1/companies/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the yes4trackV1CompaniesIdPatch operation.
     * @callback moduleapi/CompanyApi~yes4trackV1CompaniesIdPatchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update part of Company
     * @param {Array.<module:model/Operation>} body Atributes values
     * @param {String} id Company id
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/CompanyApi~yes4trackV1CompaniesIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    yes4trackV1CompaniesIdPatch(body, id, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling yes4trackV1CompaniesIdPatch");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling yes4trackV1CompaniesIdPatch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/yes4track/v1/companies/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the yes4trackV1CompaniesIdPut operation.
     * @callback moduleapi/CompanyApi~yes4trackV1CompaniesIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Company
     * @param {String} id Company Id
     * @param {Object} opts Optional parameters
     * @param {module:model/PutCompanyRequest} opts.body Company to update
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/CompanyApi~yes4trackV1CompaniesIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    yes4trackV1CompaniesIdPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling yes4trackV1CompaniesIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/yes4track/v1/companies/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the yes4trackV1CompaniesPost operation.
     * @callback moduleapi/CompanyApi~yes4trackV1CompaniesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostCompanyResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Company
     * @param {Object} opts Optional parameters
     * @param {module:model/PostCompanyRequest} opts.body Company to create
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/CompanyApi~yes4trackV1CompaniesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    yes4trackV1CompaniesPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PostCompanyResponse;

      return this.apiClient.callApi(
        '/yes4track/v1/companies', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}