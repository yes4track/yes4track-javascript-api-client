/*
 * Caspian.Yes4Track.Service API
 * Caspian.Yes4Track.Service API
 *
 * OpenAPI spec version: v1
 * Contact: admin@yes4track.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.29
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {ErrorDetails} from '../model/ErrorDetails';
import {GetAllActiveTrailByAngelResponse} from '../model/GetAllActiveTrailByAngelResponse';
import {GetAllPagedTrailResponse} from '../model/GetAllPagedTrailResponse';
import {GetAllTrailResponse} from '../model/GetAllTrailResponse';
import {GetByIdTrailGeoDataResponse} from '../model/GetByIdTrailGeoDataResponse';
import {Operation} from '../model/Operation';
import {PostAdventureResponse} from '../model/PostAdventureResponse';
import {PostTrailChunckGeoDataRequest} from '../model/PostTrailChunckGeoDataRequest';
import {PostTrailGeoDataResponse} from '../model/PostTrailGeoDataResponse';
import {PostTrailPhotosResponse} from '../model/PostTrailPhotosResponse';
import {PostTrailRequest} from '../model/PostTrailRequest';
import {PostTrailResponse} from '../model/PostTrailResponse';
import {PutTrailRequest} from '../model/PutTrailRequest';
import {TrailGeoLocationDto} from '../model/TrailGeoLocationDto';

/**
* Trail service.
* @module api/TrailApi
* @version v1
*/
export class TrailApi {

    /**
    * Constructs a new TrailApi. 
    * @alias module:api/TrailApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the getByIdTrail operation.
     * @callback moduleapi/TrailApi~getByIdTrailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAllTrailResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Trail by id
     * @param {String} id Trail id
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/TrailApi~getByIdTrailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getByIdTrail(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getByIdTrail");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAllTrailResponse;

      return this.apiClient.callApi(
        '/yes4track/v1/trails/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getByIdTrailGeoData operation.
     * @callback moduleapi/TrailApi~getByIdTrailGeoDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetByIdTrailGeoDataResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Trail Geo Data by id
     * @param {String} id Trail id
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/TrailApi~getByIdTrailGeoDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getByIdTrailGeoData(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getByIdTrailGeoData");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetByIdTrailGeoDataResponse;

      return this.apiClient.callApi(
        '/yes4track/v1/trails/{id}/geodata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getByIdTrailGeoLocation operation.
     * @callback moduleapi/TrailApi~getByIdTrailGeoLocationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrailGeoLocationDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Trail Geo Location by id
     * @param {String} id Trail id
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/TrailApi~getByIdTrailGeoLocationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getByIdTrailGeoLocation(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getByIdTrailGeoLocation");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TrailGeoLocationDto;

      return this.apiClient.callApi(
        '/yes4track/v1/trails/{id}/geolocation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the yes4trackV1TrailsActiveByAngelGet operation.
     * @callback moduleapi/TrailApi~yes4trackV1TrailsActiveByAngelGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAllActiveTrailByAngelResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Active Trail by Angel
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/TrailApi~yes4trackV1TrailsActiveByAngelGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    yes4trackV1TrailsActiveByAngelGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAllActiveTrailByAngelResponse;

      return this.apiClient.callApi(
        '/yes4track/v1/trails/activeByAngel', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the yes4trackV1TrailsGet operation.
     * @callback moduleapi/TrailApi~yes4trackV1TrailsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAllPagedTrailResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Trail by filter with pagination
     * @param {Object} opts Optional parameters
     * @param {String} opts.adventureId 
     * @param {String} opts.name 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.adventureName 
     * @param {String} opts.userCreated 
     * @param {Number} opts.page 
     * @param {Number} opts.pageSize 
     * @param {String} opts.sort Sorting atributes, sample: id.desc,name.asc
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/TrailApi~yes4trackV1TrailsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    yes4trackV1TrailsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'adventureId': opts['adventureId'],'name': opts['name'],'startDate': opts['startDate'],'endDate': opts['endDate'],'adventureName': opts['adventureName'],'userCreated': opts['userCreated'],'page': opts['page'],'pageSize': opts['pageSize'],'sort': opts['sort']
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAllPagedTrailResponse;

      return this.apiClient.callApi(
        '/yes4track/v1/trails', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the yes4trackV1TrailsIdAngelAngelIdDelete operation.
     * @callback moduleapi/TrailApi~yes4trackV1TrailsIdAngelAngelIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Trail Angel by Id
     * @param {String} id Trail id
     * @param {String} angelId Angel id
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/TrailApi~yes4trackV1TrailsIdAngelAngelIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    yes4trackV1TrailsIdAngelAngelIdDelete(id, angelId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling yes4trackV1TrailsIdAngelAngelIdDelete");
      }
      // verify the required parameter 'angelId' is set
      if (angelId === undefined || angelId === null) {
        throw new Error("Missing the required parameter 'angelId' when calling yes4trackV1TrailsIdAngelAngelIdDelete");
      }

      let pathParams = {
        'id': id,'angelId': angelId
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/yes4track/v1/trails/{id}/angel/{angelId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the yes4trackV1TrailsIdAngelAngelIdPost operation.
     * @callback moduleapi/TrailApi~yes4trackV1TrailsIdAngelAngelIdPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Trail Angel by Id
     * @param {String} id Trail id
     * @param {String} angelId Angel id
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/TrailApi~yes4trackV1TrailsIdAngelAngelIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    yes4trackV1TrailsIdAngelAngelIdPost(id, angelId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling yes4trackV1TrailsIdAngelAngelIdPost");
      }
      // verify the required parameter 'angelId' is set
      if (angelId === undefined || angelId === null) {
        throw new Error("Missing the required parameter 'angelId' when calling yes4trackV1TrailsIdAngelAngelIdPost");
      }

      let pathParams = {
        'id': id,'angelId': angelId
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/yes4track/v1/trails/{id}/angel/{angelId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the yes4trackV1TrailsIdCompanyIdTrailtoadventurePost operation.
     * @callback moduleapi/TrailApi~yes4trackV1TrailsIdCompanyIdTrailtoadventurePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostAdventureResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Convert Trail to Adventure
     * @param {String} id Trail Id
     * @param {String} companyId Company Id
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/TrailApi~yes4trackV1TrailsIdCompanyIdTrailtoadventurePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    yes4trackV1TrailsIdCompanyIdTrailtoadventurePost(id, companyId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling yes4trackV1TrailsIdCompanyIdTrailtoadventurePost");
      }
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling yes4trackV1TrailsIdCompanyIdTrailtoadventurePost");
      }

      let pathParams = {
        'id': id,'companyId': companyId
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = PostAdventureResponse;

      return this.apiClient.callApi(
        '/yes4track/v1/trails/{id}/{companyId}/trailtoadventure', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the yes4trackV1TrailsIdDelete operation.
     * @callback moduleapi/TrailApi~yes4trackV1TrailsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Trail by Id
     * @param {String} id Trail id
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/TrailApi~yes4trackV1TrailsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    yes4trackV1TrailsIdDelete(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling yes4trackV1TrailsIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/yes4track/v1/trails/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the yes4trackV1TrailsIdGeodataChunckPost operation.
     * @callback moduleapi/TrailApi~yes4trackV1TrailsIdGeodataChunckPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Chunck Trail GeoData
     * @param {module:model/PostTrailChunckGeoDataRequest} body Object Request
     * @param {String} id Trail Id
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/TrailApi~yes4trackV1TrailsIdGeodataChunckPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    yes4trackV1TrailsIdGeodataChunckPost(body, id, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling yes4trackV1TrailsIdGeodataChunckPost");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling yes4trackV1TrailsIdGeodataChunckPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/yes4track/v1/trails/{id}/geodata/chunck', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the yes4trackV1TrailsIdGeodataPost operation.
     * @callback moduleapi/TrailApi~yes4trackV1TrailsIdGeodataPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostTrailGeoDataResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Trail GeoData
     * @param {String} id Trail Id
     * @param {Object} opts Optional parameters
     * @param {Array.<Blob>} opts.files 
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/TrailApi~yes4trackV1TrailsIdGeodataPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    yes4trackV1TrailsIdGeodataPost(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling yes4trackV1TrailsIdGeodataPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        'files': this.apiClient.buildCollectionParam(opts['files'], 'multi')
      };

      let authNames = ['Bearer'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = PostTrailGeoDataResponse;

      return this.apiClient.callApi(
        '/yes4track/v1/trails/{id}/geodata', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the yes4trackV1TrailsIdImagesPost operation.
     * @callback moduleapi/TrailApi~yes4trackV1TrailsIdImagesPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PostTrailPhotosResponse>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add images in trail
     * @param {String} id Trail Id
     * @param {Object} opts Optional parameters
     * @param {Array.<Blob>} opts.images 
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/TrailApi~yes4trackV1TrailsIdImagesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    yes4trackV1TrailsIdImagesPost(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling yes4trackV1TrailsIdImagesPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        'images': this.apiClient.buildCollectionParam(opts['images'], 'multi')
      };

      let authNames = ['Bearer'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [PostTrailPhotosResponse];

      return this.apiClient.callApi(
        '/yes4track/v1/trails/{id}/images', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the yes4trackV1TrailsIdMapPhotoPut operation.
     * @callback moduleapi/TrailApi~yes4trackV1TrailsIdMapPhotoPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Trail Map Photo
     * @param {String} id Trail Id
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/TrailApi~yes4trackV1TrailsIdMapPhotoPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    yes4trackV1TrailsIdMapPhotoPut(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling yes4trackV1TrailsIdMapPhotoPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/yes4track/v1/trails/{id}/map/photo', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the yes4trackV1TrailsIdPatch operation.
     * @callback moduleapi/TrailApi~yes4trackV1TrailsIdPatchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update part of Trail
     * Sample request:                    PATCH /yes4track/v1/Trail/{id}      [          {              \&quot;op\&quot;: \&quot;replace\&quot;,              \&quot;path\&quot;: \&quot;/atribute_name\&quot;,              \&quot;value\&quot;: \&quot;new value\&quot;          }      ]
     * @param {Array.<module:model/Operation>} body Atributes values
     * @param {String} id Trail id
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/TrailApi~yes4trackV1TrailsIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    yes4trackV1TrailsIdPatch(body, id, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling yes4trackV1TrailsIdPatch");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling yes4trackV1TrailsIdPatch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/yes4track/v1/trails/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the yes4trackV1TrailsIdPut operation.
     * @callback moduleapi/TrailApi~yes4trackV1TrailsIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Trail
     * @param {String} id Trail Id
     * @param {Object} opts Optional parameters
     * @param {module:model/PutTrailRequest} opts.body Trail to update
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/TrailApi~yes4trackV1TrailsIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    yes4trackV1TrailsIdPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling yes4trackV1TrailsIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/yes4track/v1/trails/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the yes4trackV1TrailsIdSponsorSponsorIdDelete operation.
     * @callback moduleapi/TrailApi~yes4trackV1TrailsIdSponsorSponsorIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Trail Sponsor by Id
     * @param {String} id Trail id
     * @param {String} sponsorId Sponsor id
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/TrailApi~yes4trackV1TrailsIdSponsorSponsorIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    yes4trackV1TrailsIdSponsorSponsorIdDelete(id, sponsorId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling yes4trackV1TrailsIdSponsorSponsorIdDelete");
      }
      // verify the required parameter 'sponsorId' is set
      if (sponsorId === undefined || sponsorId === null) {
        throw new Error("Missing the required parameter 'sponsorId' when calling yes4trackV1TrailsIdSponsorSponsorIdDelete");
      }

      let pathParams = {
        'id': id,'sponsorId': sponsorId
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/yes4track/v1/trails/{id}/sponsor/{sponsorId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the yes4trackV1TrailsIdSponsorSponsorIdPost operation.
     * @callback moduleapi/TrailApi~yes4trackV1TrailsIdSponsorSponsorIdPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Trail Sponsor by Id
     * @param {String} id Trail id
     * @param {String} sponsorId Sponsor id
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/TrailApi~yes4trackV1TrailsIdSponsorSponsorIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    yes4trackV1TrailsIdSponsorSponsorIdPost(id, sponsorId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling yes4trackV1TrailsIdSponsorSponsorIdPost");
      }
      // verify the required parameter 'sponsorId' is set
      if (sponsorId === undefined || sponsorId === null) {
        throw new Error("Missing the required parameter 'sponsorId' when calling yes4trackV1TrailsIdSponsorSponsorIdPost");
      }

      let pathParams = {
        'id': id,'sponsorId': sponsorId
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/yes4track/v1/trails/{id}/sponsor/{sponsorId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the yes4trackV1TrailsPost operation.
     * @callback moduleapi/TrailApi~yes4trackV1TrailsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostTrailResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Trail
     * @param {Object} opts Optional parameters
     * @param {module:model/PostTrailRequest} opts.body Trail to create
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/TrailApi~yes4trackV1TrailsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    yes4trackV1TrailsPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PostTrailResponse;

      return this.apiClient.callApi(
        '/yes4track/v1/trails', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}